#!/usr/bin/env python
# coding: utf-8
# Syncronise all IMAP mailboxes, then show a message if there are new messages
# Requires: isync, notmuch, terminal-notifier
import json
import sys
import subprocess

# Tag given to new mail that not notification has been created for
NEW_TAG = 'unnotified'
MBSYNC = '/usr/local/bin/mbsync'
NOTMUCH = '/usr/local/bin/notmuch'
TERMINAL_NOTIFIER = '/usr/local/bin/terminal-notifier'


# https://stackoverflow.com/a/10824420/596068
def flatten(container):
    for i in container:
        if isinstance(i, (list, tuple)):
            for j in flatten(i):
                yield j
        else:
            yield i


def first_line(mime_parts, truncate):
    """Return the first meaningful line of a message."""
    for mp in mime_parts:
        if mp['content-type'] == 'text/plain':
            # 120 characters, just like Twitter!
            # The Notification Center will truncate the string for us anyway
            content = mp['content'].replace('\n', ' ')[:truncate]
            break
        elif mp['content-type'] == 'multipart/alternative':
            content = first_line(mp['content'], truncate)
            break
    else:
        content = ''
    return content


def notifications():
    messages = json.loads(
        subprocess.check_output([
            NOTMUCH,
            'show',
            '--format=json',
            '--entire-thread=false',
            'tag:{0}'.format(NEW_TAG),
            'folder:cern/Inbox',
            'folder:personal/Inbox'
        ])
    )
    for message in messages:
        m = filter(lambda x: x and 'headers' in x, flatten(message))[0]
        title = m['headers']['Subject']
        # Get the name from the 'First Last <user@email.tld>' format
        subtitle = m['headers']['From'].split('<')[0]
        message = first_line(m['body'], truncate=120)
        subprocess.call([
            TERMINAL_NOTIFIER,
            '-title', '"{0}"'.format(title),
            '-subtitle', '"{0}"'.format(subtitle),
            '-message', '"{0}"'.format(message),
            '-group', 'neomutt',
            '-appIcon', '/Applications/Mail.app/Contents/Resources/ApplicationIcon.icns',
            '-timeout', '5'
        ])


def new_mail(mailboxes):
    """Fetch new mail from the mailboxes and show inbox notifications.

    This runs in a few stages:
        1. Kill any stuck mbsync instances from previous runs
        2. Syncronise mail with remote servers using mbsync
        3. Remove all 'new' tags from messages in the notmuch DB
        4. Assign all new messages the 'new' tag in the notmuch DB
        5. Display notifications for all 'new'-tagged messages in all inboxx
    """
    subprocess.call('killall mbsync', shell=True)
    subprocess.call([MBSYNC] + mailboxes)
    subprocess.call([NOTMUCH, 'tag',
                     '-{0}'.format(NEW_TAG),
                     'tag:{0}'.format(NEW_TAG)])
    subprocess.call([NOTMUCH, 'new'])
    notifications()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        mailboxes = sys.argv[1:]
    else:
        mailboxes = ['-a']
    new_mail(mailboxes)
