#!/usr/bin/env bash

echo ""
echo "======================================="
echo "Installing Software with Apt           "
echo "======================================="

sudo add-apt-repository -y ppa:ubuntu-x-swat/updates
sudo add-apt-repository -y ppa:greymd/tmux-xpanes
sudo add-apt-repository -y ppa:longsleep/golang-backports

sudo apt-get -y update
sudo apt-get -y dist-upgrade

sudo apt-get -y install build-essential cmake cargo \
    golang-go python-pip python3-pip \
    curl git stow tree neovim \
    tmux tmux-xpanes \
    msmtp notmuch isync lbdb urlview \
    xdg-utils xpra mesa-utils \

echo ""
echo "======================================="
echo "Installing Software with Pip           "
echo "======================================="

sudo pip3 install academic awscli pip_upgrade_outdated

  # clone the repository
  # apt-get -y install libxcb1-dev libxcb-keysyms1-dev libpango1.0-dev libxcb-util0-dev libxcb-icccm4-dev libyajl-dev libstartup-notification0-dev libxcb-randr0-dev libev-dev libxcb-cursor-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev autoconf libxcb-xrm0 libxcb-xrm-dev automake
  # cd /tmp
  # git clone https://www.github.com/Airblader/i3
  # cd i3

  # compile & install
  # autoreconf --force --install
  # rm -rf build/
  # mkdir -p build && cd build/

  # Disabling sanitizers is important for release versions!
  # The prefix and sysconfdir are, obviously, dependent on the distribution.
  # ../configure --prefix=/usr --sysconfdir=/etc --disable-sanitizers
  # make
  # make install

  # gnu-radio
  # sudo apt-get install python3-pip python-pip python-mako python-lxml
  # sudo pip3 install PyBOMBs

  # for server: su to root and do the following
  # pybombs auto-config
  # pybombs recipes add-defaults
  # pybombs prefix init /usr/local/ -a system_prefix -R gnuradio-default

echo ""
echo "======================================="
echo "Installing Software from Source        "
echo "======================================="

# Local bin
if [ ! -d "~/.local/bin" ]; then
  mkdir -p ~/.local/bin
fi

# Github
if [ ! -d "~/Cloud/Github" ]; then
  mkdir -p ~/Cloud/Github
fi

command -v blsd > /dev/null ||
  (bash <(curl -fL https://raw.githubusercontent.com/junegunn/blsd/master/install) && mv blsd ~/.local/bin)

if [ ! -e ~/.local/bin/z.sh ]; then
  curl https://raw.githubusercontent.com/rupa/z/master/z.sh -o ~/.local/bin/z.sh
fi

# git-prompt
if [ ! -e ~/.git-prompt.sh ]; then
  curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.git-prompt.sh
fi

# Kitty
curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin \
  dest=~/Cloud/Github
stow --no-folding -d ~/Cloud/Github kitty.app/ -t ~/.local/

# fd
cd ~/Cloud/Github
git clone https://github.com/sharkdp/fd
cd fd
cargo build
ln -sf ~/.cargo/bin/fd ~/.local/bin/

# hugo
cd ~/Cloud/Github
git clone https://github.com/gohugoio/hugo.git
cd hugo
go install --tags extended
ln -sf ~/.local/share/go/bin/hugo ~/.local/bin/

# Dropbox
echo ""
echo "======================================="
echo "Do you want to stow cfg-mail? (y/n) "
echo "======================================="
stty raw -echo ; ans_cfg_mail=$(head -c 1) ; stty $old_stty_cfg

if echo "$ans_cfg_term" | grep -iq "^y" ;then
  [ -d ~/.dropbox-dist ] || (cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf - && cd $dotfiles_dir)

  command -v dropbox > /dev/null ||
    (curl -fLo ~/.local/bin/dropbox https://www.dropbox.com/download?dl=packages/dropbox.py; chmod +x ~/.local/bin/dropbox)
fi

